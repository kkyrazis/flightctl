// Package v1alpha1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package v1alpha1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	externalRef0 "github.com/flightctl/flightctl/api/v1alpha1"
	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"noYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	pathPrefix := path.Dir(pathToFile)

	for rawPath, rawFunc := range externalRef0.PathToRawSpec(path.Join(pathPrefix, "../openapi.yaml")) {
		if _, ok := res[rawPath]; ok {
			// it is not possible to compare functions in golang, so always overwrite the old value
		}
		res[rawPath] = rawFunc
	}
	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
